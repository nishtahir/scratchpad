import com.nishtahir.JetFilesProvider
import com.sun.org.apache.xpath.internal.operations.Bool
import javax.swing.JFrame
import javax.swing.JPanel

fun main(args: Array<String>) {
//    println(unique("test"))

    { println("test") }.fun Function0<Unit>.() { invoke() }()
    val test = 0B10
    println(test)

    val function = fun(x: Int, y: Int): Int {
        return x + y
    }
}

JetFilesProvider().fun Function<JetFilesProvider>.(){}()


fun unique(input: String): Boolean = input.toList().let { it.distinct() == it }


fun adventOfCode() {
    val input = "649713959682898259577777982349515784822684939966191359164369933435366431847754488661965363557985166219358714739318371382388296151195361571216131925158492441461844687324923315381358331571577613789649166486152237945917987977793891739865149734755993241361886336926538482271124755359572791451335842534893192693558659991171983849285489139421425933638614884415896938914992732492192458636484523228244532331587584779552788544667253577324649915274115924611758345676183443982992733966373498385685965768929241477983727921279826727976872556315428434799161759734932659829934562339385328119656823483954856427365892627728163524721467938449943358192632262354854593635831559352247443975945144163183563723562891357859367964126289445982135523535923113589316417623483631637569291941782992213889513714525342468563349385271884221685549996534333765731243895662624829924982971685443825366827923589435254514211489649482374876434549682785459698885521673258939413255158196525696236457911447599947449665542554251486847388823576937167237476556782133227279324526834946534444718161524129285919477959937684728882592779941734186144138883994322742484853925383518651687147246943421311287324867663698432546619583638976637733345251834869985746385371617743498627111441933546356934671639545342515392536574744795732243617113574641284231928489312683617154536648219244996491745718658151648246791826466973654765284263928884137863647623237345882469142933142637583644258427416972595241737254449718531724176538648369253796688931245191382956961544775856872281317743828552629843551844927913147518377362266554334386721313244223233396453291224932499277961525785755863852487141946626663835195286762947172384186667439516367219391823774338692151926472717373235612911848773387771244144969149482477519437822863422662157461968444281972353149695515494992537927492111388193837553844671719291482442337761321272333982924289323437277224565149928416255435841327756139118119744528993269157174414264387573331116323982614862952264597611885999285995516357519648695594299657387614793341626318866519144574571816535351149394735916975448425618171572917195165594323552199346814729617189679698944337146"
    val circularInput = input + input[0]
    val items = (1..5).toMutableList()
    println("Shuffled items: $items")
    val result1 = circularInput.zipWithNext { a, b -> if (a == b) a - '0' else 0 }.sum()
    println("1: $result1")
}

fun glassable() {
    (2000..3000)
            .asSequence()
            .map { FourDigitYear(it) }
            .filter { it.isGlassable(strict = true) }
            .forEach { println(it.value) }
}


val test: ((test: String, String) -> Unit)? = null
val ttes: Function2<String, String, Unit>? = null



val estt: ((() -> (() -> ((() -> Unit, String) -> Unit))))? = null

val `() -\u003E Stuff`: () ->


data class FourDigitYear(val value: Int) {
    init {
        require(value in 1000..9999) { IllegalArgumentException("Four-digit years only") }
    }

    private val charArray = String.format("%04d", value).toCharArray()

    fun isGlassable(strict: Boolean): Boolean {
        val eyeballables = charArray.map { it.isEyeballable(strict) }
        return eyeballables[0] && eyeballables[2] ||
                eyeballables[1] && eyeballables[2] ||
                eyeballables[1] && eyeballables[3]
    }

    fun Char.isEyeballable(strict: Boolean): Boolean {
        return if (strict) this == '0' else
            this in arrayOf('0', '6', '8')
    }
}

interface Calculator {
    fun calculate(int: Int?, int1: Int?): Int
}

object Something : Calculator {
    fun calculate(int: Int, int1: Int): Int {
        return Something.calculate(int, int1)
    }

    override fun calculate(int: Int?, int1: Int?): Int {
        return int!! + int1!!
    }

}

data class Point2(val x: Int, val y: Int)

data class Point3(val x: Int, val y: Int, val z: Int) {
    override fun equals(other: Any?): Boolean {

        return when (other) {
            is Point3 -> (x == other.x && y == other.y && z == other.z)
            is Point2 -> (x == other.x && y == other.y && z == 0)
            else -> false
        }
    }
}


